{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\nodejs\\\\mern\\\\SocialApp-React-Native-master\\\\screens\\\\chat\\\\ChatScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport * as chatActions from \"../../store/actions/chat\";\nimport socketIO from 'socket.io-client';\nimport ENV from \"../../env\";\nimport { Octicons } from '@expo/vector-icons';\nimport Colors from \"../../constants/Colors\";\nimport VerifiedUser from \"../../constants/VerifiedUser\";\nvar socket;\n\nvar ChatScreen = function ChatScreen(props) {\n  var dispatch = useDispatch();\n  var route = props.route;\n  var user = route.params.user;\n  var userId = user._id;\n  var loggedUser = useSelector(function (state) {\n    return state.auth.user;\n  });\n  var chats = useSelector(function (state) {\n    return state.chat.allChats;\n  });\n  var currChats = chats.filter(function (c) {\n    return c.sender._id === loggedUser._id && c.reciever._id === userId || c.sender._id === userId && c.reciever._id === loggedUser._id;\n  });\n  var resultChats = currChats.map(function (c) {\n    return {\n      _id: c._id,\n      text: c.message,\n      createdAt: new Date(c.time),\n      user: {\n        _id: c.sender._id,\n        name: c.sender.name\n      }\n    };\n  }).reverse();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(resultChats),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var sendPushNotification = function sendPushNotification(userName, text) {\n    var message, response, res;\n    return _regeneratorRuntime.async(function sendPushNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            message = {\n              to: user.notificationToken,\n              sound: 'default',\n              title: \"New message from \" + userName,\n              body: text,\n              data: {\n                data: 'goes here'\n              },\n              _displayInForeground: true\n            };\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Accept-encoding': 'gzip, deflate',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(message)\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            res = _context.sent;\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    socket = socketIO.connect(ENV.apiUrl);\n    socket.on('connect', function () {\n      console.log('connected chat screen');\n      socket.emit('userInfo', loggedUser);\n    });\n  }, []);\n  useEffect(function () {\n    socket.on('message', function (newChat) {\n      console.log(\"New message\");\n\n      if (newChat.sender._id === loggedUser._id || newChat.sender._id === userId) {\n        var giftedNewChat = {\n          _id: newChat._id,\n          text: newChat.message,\n          createdAt: new Date(newChat.time),\n          user: {\n            _id: newChat.sender._id,\n            name: newChat.sender.name\n          }\n        };\n        setMessages(function (previousMessages) {\n          return GiftedChat.append(previousMessages, giftedNewChat);\n        });\n      }\n\n      dispatch(chatActions.addChat(newChat));\n    });\n  }, [setMessages]);\n\n  var _onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    socket.emit('sendMessage', messages[0].text, loggedUser, user, function () {\n      console.log(\"NOTIFICATION PUSHING to\", user.name);\n      sendPushNotification(loggedUser.name, messages[0].text);\n      setText('');\n    });\n  }, []);\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, React.createElement(GiftedChat, {\n    text: text,\n    onInputTextChanged: function onInputTextChanged(text) {\n      return setText(text);\n    },\n    messages: messages,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    user: {\n      _id: loggedUser._id\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport var screenOptions = function screenOptions(navData) {\n  var routeParams = navData.route.params;\n  return {\n    headerTitle: function headerTitle() {\n      return React.createElement(Text, {\n        style: {\n          color: \"#fff\",\n          fontSize: 20,\n          fontWeight: \"600\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, routeParams.user.name + \" \", VerifiedUser.verifiedUsersId.includes(routeParams.user._id) && React.createElement(Octicons, {\n        name: \"verified\",\n        size: 18,\n        color: \"#fff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 84\n        }\n      }));\n    }\n  };\n};\nexport default ChatScreen;","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/screens/chat/ChatScreen.js"],"names":["React","useState","useCallback","useEffect","useDispatch","useSelector","GiftedChat","chatActions","socketIO","ENV","Octicons","Colors","VerifiedUser","socket","ChatScreen","props","dispatch","route","user","params","userId","_id","loggedUser","state","auth","chats","chat","allChats","currChats","filter","c","sender","reciever","resultChats","map","text","message","createdAt","Date","time","name","reverse","setText","messages","setMessages","sendPushNotification","userName","to","notificationToken","sound","title","body","data","_displayInForeground","fetch","method","headers","Accept","JSON","stringify","response","json","res","connect","apiUrl","on","console","log","emit","newChat","giftedNewChat","previousMessages","append","addChat","onSend","flex","backgroundColor","screenOptions","navData","routeParams","headerTitle","color","fontSize","fontWeight","verifiedUsersId","includes"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\n\r\nimport * as chatActions from '../../store/actions/chat';\r\n\r\nimport socketIO from 'socket.io-client';\r\nimport ENV from '../../env';\r\nimport { Octicons } from '@expo/vector-icons'\r\nimport Colors from '../../constants/Colors';\r\nimport VerifiedUser from '../../constants/VerifiedUser';\r\n\r\n\r\nlet socket;\r\n\r\nconst ChatScreen = (props) => {\r\n    const dispatch = useDispatch();\r\n    const { route } = props;\r\n    const user = route.params.user;\r\n    const userId = user._id;\r\n    const loggedUser = useSelector(state => state.auth.user);\r\n\r\n    const chats = useSelector(state => state.chat.allChats);\r\n    const currChats = chats.filter(c => (c.sender._id === loggedUser._id && c.reciever._id === userId) || (c.sender._id === userId && c.reciever._id === loggedUser._id))\r\n    const resultChats = currChats.map(c => {\r\n        return {\r\n            _id: c._id,\r\n            text: c.message,\r\n            createdAt: new Date(c.time),\r\n            user: {\r\n                _id: c.sender._id,\r\n                name: c.sender.name,\r\n            }\r\n        }\r\n    }).reverse();\r\n\r\n    const [text, setText] = useState('');\r\n    const [messages, setMessages] = useState(resultChats);\r\n\r\n    const sendPushNotification = async (userName, text) => {\r\n        const message = {\r\n            to: user.notificationToken,\r\n            sound: 'default',\r\n            title: `New message from ${userName}`,\r\n            body: text,\r\n            data: { data: 'goes here' },\r\n            _displayInForeground: true,\r\n        };\r\n        const response = await fetch('https://exp.host/--/api/v2/push/send', {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Accept-encoding': 'gzip, deflate',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(message),\r\n        });\r\n\r\n        const res = await response.json();\r\n        // console.log(res);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        socket = socketIO.connect(ENV.apiUrl)\r\n        socket.on('connect', () => {\r\n            console.log('connected chat screen')\r\n            socket.emit('userInfo', loggedUser);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('message', (newChat) => {\r\n            console.log(\"New message\");\r\n            // if(newChat.sender._id !== loggedUser._id){\r\n                //push notification\r\n            // }\r\n\r\n            if( newChat.sender._id === loggedUser._id || newChat.sender._id === userId ){\r\n                let giftedNewChat = {\r\n                    _id: newChat._id,\r\n                    text: newChat.message,\r\n                    createdAt: new Date(newChat.time),\r\n                    user: {\r\n                        _id: newChat.sender._id,\r\n                        name: newChat.sender.name\r\n                        // avatar: \r\n                    }\r\n                }\r\n                setMessages(previousMessages => GiftedChat.append(previousMessages, giftedNewChat) )\r\n            }\r\n            dispatch(chatActions.addChat(newChat))\r\n        })\r\n    }, [setMessages])\r\n\r\n    const onSend = useCallback((messages = []) => {\r\n        socket.emit('sendMessage', messages[0].text, loggedUser, user,  () => {\r\n\r\n            console.log(\"NOTIFICATION PUSHING to\", user.name)\r\n            sendPushNotification(loggedUser.name, messages[0].text);\r\n            setText('');\r\n            // setMessages(previousMessages => GiftedChat.append(previousMessages, messages))\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <View style={{ flex: 1, backgroundColor: '#fff' }} >\r\n            <GiftedChat\r\n                text={text}\r\n                onInputTextChanged={text => setText(text)}\r\n                messages={messages}\r\n                onSend={messages => onSend(messages)}\r\n                user={{\r\n                    _id: loggedUser._id,\r\n                }}\r\n                // alwaysShowSend={true}\r\n                // inverted={false}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\nexport const screenOptions = (navData) => {\r\n\r\n    const routeParams = navData.route.params;\r\n    return {\r\n        \r\n        headerTitle: () => (\r\n            <Text\r\n                style={{ color: \"#fff\", fontSize: 20, fontWeight: \"600\" }}\r\n            >\r\n                {routeParams.user.name + \" \"}\r\n                {\r\n                    VerifiedUser.verifiedUsersId.includes(routeParams.user._id) && <Octicons name=\"verified\" size={18} color=\"#fff\" />\r\n                }\r\n            </Text>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatScreen;"]},"metadata":{},"sourceType":"module"}
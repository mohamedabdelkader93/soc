{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\nodejs\\\\mern\\\\SocialApp-React-Native-master\\\\screens\\\\user\\\\UserPostsScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigation } from '@react-navigation/native';\nimport Card from \"../../components/UI/Card\";\nimport Colors from \"../../constants/Colors\";\nimport * as postsActions from \"../../store/actions/posts\";\n\nvar UserPostsScreen = function UserPostsScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isRefreshing = _useState4[0],\n      setIsRefreshing = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var refUserPosts = useRef(null);\n  var route = props.route;\n  var userId = route.params.userId;\n  var postIndex = route.params.postIndex;\n  var fromUserProfile = route.params.fromUserProfile;\n  var loggedInUserId = useSelector(function (state) {\n    return state.auth.user._id;\n  });\n  var allPosts = useSelector(function (state) {\n    return state.posts.allPosts;\n  });\n  var posts = allPosts.filter(function (p) {\n    return p.postedBy._id === userId;\n  });\n  var dispatch = useDispatch();\n  var navigation = useNavigation();\n  var loadPosts = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsRefreshing(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(postsActions.fetchPosts()));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](1);\n            setError(_context.t0.message);\n\n          case 9:\n            setIsRefreshing(false);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  }, [dispatch, setIsLoading]);\n  useEffect(function () {\n    var unsubscribe = navigation.addListener('focus', function (e) {\n      if (refUserPosts.current) {\n        refUserPosts.current.scrollToIndex({\n          animated: true,\n          index: postIndex\n        });\n      }\n    });\n    return function () {\n      unsubscribe();\n    };\n  }, []);\n\n  var toggleLikeHandler = function toggleLikeHandler(postId, isLiked) {\n    return _regeneratorRuntime.async(function toggleLikeHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n\n            if (!isLiked) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(postsActions.unlikePost(postId)));\n\n          case 4:\n            _context2.next = 8;\n            break;\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(dispatch(postsActions.likePost(postId)));\n\n          case 8:\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"ERROR \", _context2.t0);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  if (error) {\n    return React.createElement(View, {\n      style: styles.centered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, \"An error occured.\"), React.createElement(Button, {\n      title: \"Try again\",\n      onPress: loadPosts,\n      color: Colors.primary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.centered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.primary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  if (!isLoading && posts.length === 0) {\n    return React.createElement(View, {\n      style: styles.centered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, \"No posts found. Maybe start adding some!\"));\n  }\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    ref: refUserPosts,\n    style: styles.list,\n    onRefresh: loadPosts,\n    refreshing: isRefreshing,\n    data: posts,\n    onScrollToIndexFailed: function onScrollToIndexFailed(info) {\n      var wait = new Promise(function (resolve) {\n        return setTimeout(resolve, 500);\n      });\n      wait.then(function () {\n        var _refUserPosts$current;\n\n        (_refUserPosts$current = refUserPosts.current) == null ? void 0 : _refUserPosts$current.scrollToIndex({\n          index: info.index,\n          animated: true\n        });\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    ItemSeparatorComponent: function ItemSeparatorComponent() {\n      return React.createElement(View, {\n        style: styles.separator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      });\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      return React.createElement(Card, {\n        post: item,\n        userId: loggedInUserId,\n        toggleLikeHandler: toggleLikeHandler,\n        index: index,\n        fromUserProfile: fromUserProfile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport var screenOptions = {\n  headerTitle: 'Posts'\n};\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white'\n  },\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  list: {\n    width: '100%'\n  },\n  separator: {\n    marginTop: 10\n  }\n});\nexport default UserPostsScreen;","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/screens/user/UserPostsScreen.js"],"names":["React","useState","useCallback","useEffect","useRef","useDispatch","useSelector","useNavigation","Card","Colors","postsActions","UserPostsScreen","props","isLoading","setIsLoading","isRefreshing","setIsRefreshing","error","setError","refUserPosts","route","userId","params","postIndex","fromUserProfile","loggedInUserId","state","auth","user","_id","allPosts","posts","filter","p","postedBy","dispatch","navigation","loadPosts","fetchPosts","message","unsubscribe","addListener","e","current","scrollToIndex","animated","index","toggleLikeHandler","postId","isLiked","unlikePost","likePost","console","log","styles","centered","primary","length","screen","list","info","wait","Promise","resolve","setTimeout","then","item","separator","screenOptions","headerTitle","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","width","marginTop"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect, useRef} from 'react';\r\nimport { View, Text, StyleSheet, FlatList, ActivityIndicator, Button } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\n\r\nimport Card from '../../components/UI/Card';\r\nimport Colors from '../../constants/Colors';\r\n\r\nimport * as postsActions from '../../store/actions/posts';\r\n\r\n\r\nconst UserPostsScreen = (props) => {\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isRefreshing, setIsRefreshing] = useState(false);\r\n    const [error, setError] = useState();\r\n    const refUserPosts = useRef(null);\r\n    \r\n    const { route } = props;\r\n    const userId = route.params.userId;\r\n    const postIndex = route.params.postIndex;\r\n    const fromUserProfile = route.params.fromUserProfile;\r\n\r\n    const loggedInUserId = useSelector(state => state.auth.user._id);\r\n    const allPosts = useSelector(state => state.posts.allPosts);\r\n    const posts = allPosts.filter(p => p.postedBy._id === userId);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const navigation = useNavigation();\r\n\r\n    const loadPosts = useCallback(async () => {\r\n        setIsRefreshing(true);\r\n        try {\r\n            await dispatch(postsActions.fetchPosts());\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n        setIsRefreshing(false);\r\n    }, [dispatch, setIsLoading])\r\n\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = navigation.addListener('focus', e => {\r\n            if(refUserPosts.current){\r\n                refUserPosts.current.scrollToIndex({ animated: true, index: postIndex });\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [])\r\n    \r\n\r\n\r\n    const toggleLikeHandler = async (postId, isLiked) => {\r\n        try {\r\n            if(isLiked){\r\n                await dispatch(postsActions.unlikePost(postId))\r\n            } else {\r\n                await dispatch(postsActions.likePost(postId))\r\n            }\r\n        } catch (error) {\r\n            console.log(\"ERROR \", error)\r\n        }\r\n    }\r\n\r\n    if(error){\r\n        return (\r\n            <View style={styles.centered} >\r\n                <Text>An error occured.</Text>\r\n                <Button title=\"Try again\" onPress={loadPosts} color={Colors.primary} />\r\n            </View>\r\n        );\r\n    }\r\n\r\n\r\n    if(isLoading){\r\n        return (\r\n            <View style={styles.centered} >\r\n                <ActivityIndicator size='large' color={Colors.primary} />\r\n            </View>\r\n        );\r\n    }\r\n\r\n\r\n    if(!isLoading && posts.length === 0){\r\n        return(\r\n            <View style={styles.centered} >\r\n                <Text>No posts found. Maybe start adding some!</Text>\r\n            </View>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <View style={styles.screen} >\r\n            <FlatList\r\n                ref={refUserPosts}\r\n                style={styles.list}\r\n                onRefresh={loadPosts}\r\n                refreshing={isRefreshing}\r\n                data={posts}\r\n                onScrollToIndexFailed={info => {\r\n                    const wait = new Promise(resolve => setTimeout(resolve, 500));\r\n                    wait.then(() => {\r\n                        refUserPosts.current?.scrollToIndex({ index: info.index, animated: true });\r\n                    });\r\n                }}\r\n                keyExtractor={(item) => item._id }\r\n                ItemSeparatorComponent={() => {\r\n                    return (\r\n                        <View style={styles.separator} />\r\n                    )\r\n                }}\r\n                renderItem={({item, index}) => {\r\n                    return (\r\n                        <Card \r\n                            post={item} \r\n                            userId={loggedInUserId}\r\n                            toggleLikeHandler={toggleLikeHandler} \r\n                            index={index}\r\n                            fromUserProfile={fromUserProfile}\r\n                        />\r\n                    );\r\n                }} \r\n            />\r\n\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const screenOptions = {\r\n    headerTitle: 'Posts'\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: 'white'\r\n    },\r\n    centered: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    list: {\r\n        width: '100%',\r\n    },\r\n    separator: {\r\n        marginTop: 10,\r\n    },\r\n\r\n})\r\n\r\nexport default UserPostsScreen;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport ENV from \"../../env\";\nexport var AUTHENTICATE = 'AUTHENTICATE';\nexport var LOGOUT = 'LOGOUT';\nexport var SET_DID_TRY_AUTO_LOGIN = 'SET_DID_TRY_AUTO_LOGIN';\nexport var setDidTryAutoLogin = function setDidTryAutoLogin() {\n  return {\n    type: SET_DID_TRY_AUTO_LOGIN\n  };\n};\nexport var authenticate = function authenticate(user, token) {\n  return function (dispatch) {\n    dispatch({\n      type: AUTHENTICATE,\n      user: user,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(name, email, password, expoPushToken) {\n  return function _callee(dispatch) {\n    var response, resData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/signup\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                name: name,\n                email: email,\n                password: password,\n                notificationToken: expoPushToken\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context.sent;\n\n            if (!resData.error) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 8:\n            return _context.abrupt(\"return\", resData.message);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var signin = function signin(email, password, expoPushToken) {\n  return function _callee2(dispatch) {\n    var response, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/signin\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                notificationToken: expoPushToken\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context2.sent;\n\n            if (!resData.error) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 8:\n            dispatch(authenticate(resData.user, resData.token));\n            saveDataToStorage(resData.token, resData.user);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var forgotPassword = function forgotPassword(email) {\n  return function _callee3(dispatch) {\n    var response, resData;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/forgot-password\", {\n              method: 'PUT',\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email\n              })\n            }));\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context3.sent;\n\n            if (!resData.error) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 8:\n            return _context3.abrupt(\"return\", resData.message);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  AsyncStorage.removeItem('userData');\n  return {\n    type: LOGOUT\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, user) {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    user: user\n  }));\n};","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/store/actions/auth.js"],"names":["ENV","AUTHENTICATE","LOGOUT","SET_DID_TRY_AUTO_LOGIN","setDidTryAutoLogin","type","authenticate","user","token","dispatch","signup","name","email","password","expoPushToken","fetch","apiUrl","method","headers","body","JSON","stringify","notificationToken","response","json","resData","error","Error","message","signin","saveDataToStorage","forgotPassword","Accept","logout","AsyncStorage","removeItem","setItem"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\r\nimport ENV from '../../env';\r\n\r\nexport const AUTHENTICATE = 'AUTHENTICATE';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const SET_DID_TRY_AUTO_LOGIN  = 'SET_DID_TRY_AUTO_LOGIN';\r\n\r\n\r\n\r\nexport const setDidTryAutoLogin = () => {\r\n    return{\r\n        type: SET_DID_TRY_AUTO_LOGIN\r\n    };\r\n};\r\n\r\nexport const authenticate = (user, token) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: AUTHENTICATE,\r\n            user,\r\n            token\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const signup = (name, email, password, expoPushToken) => {\r\n    return async dispatch => {\r\n        const response = await fetch(`${ENV.apiUrl}/signup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name,\r\n                email,\r\n                password,\r\n                notificationToken: expoPushToken\r\n            })\r\n        });\r\n        const resData = await response.json();\r\n\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n\r\n        return resData.message;\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\nexport const signin = (email, password, expoPushToken) => {\r\n    return async dispatch => {\r\n        const response = await fetch(`${ENV.apiUrl}/signin`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password,\r\n                notificationToken: expoPushToken\r\n            })\r\n        });\r\n\r\n        const resData = await response.json();\r\n\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n\r\n        dispatch(authenticate(resData.user, resData.token));\r\n\r\n        saveDataToStorage(resData.token, resData.user);\r\n    };\r\n};\r\n\r\n\r\nexport const forgotPassword = (email) => {\r\n    return async dispatch => {\r\n        const response = await fetch(`${ENV.apiUrl}/forgot-password`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ email })\r\n        });\r\n\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n\r\n        return resData.message;\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => {\r\n    AsyncStorage.removeItem('userData');\r\n    return {\r\n        type: LOGOUT\r\n    };\r\n}\r\n\r\n\r\nconst saveDataToStorage = (token, user) => {\r\n    AsyncStorage.setItem('userData', JSON.stringify({\r\n        token,\r\n        user\r\n    }));\r\n}"]},"metadata":{},"sourceType":"module"}
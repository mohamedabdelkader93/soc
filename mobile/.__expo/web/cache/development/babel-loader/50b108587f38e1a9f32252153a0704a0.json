{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ENV from \"../../env\";\nexport var SET_CHAT_LIST = 'SET_CHAT_LIST';\nexport var SET_CHATS = 'SET_CHATS';\nexport var ADD_CHAT = 'ADD_CHAT';\nexport var fetchChatList = function fetchChatList() {\n  return function _callee(dispatch, getState) {\n    var userId, response, resData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            userId = getState().auth.user._id;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/chatlist/\" + userId));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            resData = _context.sent;\n\n            if (!resData.error) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 9:\n            dispatch({\n              type: SET_CHAT_LIST,\n              chatList: resData\n            });\n            return _context.abrupt(\"return\", resData);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var fetchChats = function fetchChats() {\n  return function _callee2(dispatch, getState) {\n    var response, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/rn/allchats\"));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context2.sent;\n\n            if (!resData.error) {\n              _context2.next = 8;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 8:\n            console.log(\"Fetching chats - actions\");\n            dispatch({\n              type: SET_CHATS,\n              chats: resData\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var addChat = function addChat(chat) {\n  return function _callee3(dispatch, getState) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: ADD_CHAT,\n              newChat: chat\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/store/actions/chat.js"],"names":["ENV","SET_CHAT_LIST","SET_CHATS","ADD_CHAT","fetchChatList","dispatch","getState","userId","auth","user","_id","fetch","apiUrl","response","json","resData","error","Error","type","chatList","fetchChats","console","log","chats","addChat","chat","newChat"],"mappings":";AAAA,OAAOA,GAAP;AAGA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AAGP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC/B,SAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,MADH,GACYD,QAAQ,GAAGE,IAAX,CAAgBC,IAAhB,CAAqBC,GADjC;AAAA;AAAA,6CAEoBC,KAAK,CAAIX,GAAG,CAACY,MAAR,kBAA2BL,MAA3B,CAFzB;;AAAA;AAEGM,YAAAA,QAFH;AAAA;AAAA,6CAImBA,QAAQ,CAACC,IAAT,EAJnB;;AAAA;AAIGC,YAAAA,OAJH;;AAAA,iBAKAA,OAAO,CAACC,KALR;AAAA;AAAA;AAAA;;AAAA,kBAMO,IAAIC,KAAJ,CAAUF,OAAO,CAACC,KAAlB,CANP;;AAAA;AASHX,YAAAA,QAAQ,CAAC;AACLa,cAAAA,IAAI,EAAEjB,aADD;AAELkB,cAAAA,QAAQ,EAAEJ;AAFL,aAAD,CAAR;AATG,6CAcIA,OAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAgBH,CAjBM;AAmBP,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC5B,SAAO,kBAAOf,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACoBK,KAAK,CAAIX,GAAG,CAACY,MAAR,kBADzB;;AAAA;AACGC,YAAAA,QADH;AAAA;AAAA,6CAGmBA,QAAQ,CAACC,IAAT,EAHnB;;AAAA;AAGGC,YAAAA,OAHH;;AAAA,iBAIAA,OAAO,CAACC,KAJR;AAAA;AAAA;AAAA;;AAAA,kBAKO,IAAIC,KAAJ,CAAUF,OAAO,CAACC,KAAlB,CALP;;AAAA;AAOHK,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAjB,YAAAA,QAAQ,CAAC;AACLa,cAAAA,IAAI,EAAEhB,SADD;AAELqB,cAAAA,KAAK,EAAER;AAFF,aAAD,CAAR;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAaH,CAdM;AAiBP,OAAO,IAAMS,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAC7B,SAAO,kBAAOpB,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAEHD,YAAAA,QAAQ,CAAC;AACLa,cAAAA,IAAI,EAAEf,QADD;AAELuB,cAAAA,OAAO,EAAED;AAFJ,aAAD,CAAR;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAOH,CARM","sourcesContent":["import ENV from '../../env';\r\n\r\n\r\nexport const SET_CHAT_LIST = 'SET_CHAT_LIST';\r\nexport const SET_CHATS = 'SET_CHATS';\r\nexport const ADD_CHAT = 'ADD_CHAT';\r\n\r\n\r\nexport const fetchChatList = () => {\r\n    return async (dispatch, getState) => {\r\n        const userId = getState().auth.user._id;\r\n        const response = await fetch(`${ENV.apiUrl}/chatlist/${userId}`);\r\n\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n        \r\n        dispatch({\r\n            type: SET_CHAT_LIST,\r\n            chatList: resData\r\n        })\r\n\r\n        return resData;\r\n    }\r\n};\r\n\r\nexport const fetchChats = () => {\r\n    return async (dispatch, getState) => {\r\n        const response = await fetch(`${ENV.apiUrl}/rn/allchats`);\r\n\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n        console.log(\"Fetching chats - actions\")\r\n        dispatch({\r\n            type: SET_CHATS,\r\n            chats: resData\r\n        })\r\n    }\r\n};\r\n\r\n\r\nexport const addChat = (chat) => {\r\n    return async (dispatch, getState) => {\r\n        // const userId = getState().auth.user._id;\r\n        dispatch({\r\n            type: ADD_CHAT,\r\n            newChat: chat\r\n        })\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}
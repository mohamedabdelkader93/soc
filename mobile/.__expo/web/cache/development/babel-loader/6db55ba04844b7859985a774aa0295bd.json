{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ENV from \"../../env\";\nexport var DELETE_POST = \"DELETE_PRODUCT\";\nexport var CREATE_POST = \"CREATE_PRODUCT\";\nexport var UPDATE_POST = \"UPDATE_PRODUCT\";\nexport var SET_POSTS = 'SET_POSTS';\nexport var LIKE_POST = 'LIKE_POST';\nexport var UNLIKE_POST = 'UNLIKE_POST';\nexport var COMMENT_POST = 'COMMENT_POST';\nexport var UNCOMMENT_POST = 'UNCOMMENT_POST';\nexport var ADD_COMMENT_TEMP = 'ADD_COMMENT_TEMP';\nexport var fetchPosts = function fetchPosts() {\n  return function _callee(dispatch, getState) {\n    var response, resData;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/rn/allposts\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            resData = _context.sent;\n\n            if (!resData.error) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 8:\n            dispatch({\n              type: SET_POSTS,\n              posts: resData\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var createPost = function createPost(title, body, base64Data, imageType) {\n  return function _callee2(dispatch, getState) {\n    var token, userId, postData, response, resData;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.user._id;\n            postData = {\n              title: title,\n              body: body,\n              base64Data: base64Data,\n              imageType: imageType\n            };\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/rn/post/new/\" + userId, {\n              method: 'POST',\n              headers: {\n                'Content-Type': \"application/json\",\n                Authorization: \"Bearer \" + token\n              },\n              body: JSON.stringify(postData)\n            }));\n\n          case 5:\n            response = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            resData = _context2.sent;\n\n            if (!resData.error) {\n              _context2.next = 11;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 11:\n            dispatch({\n              type: CREATE_POST,\n              postData: {\n                _id: resData._id,\n                title: resData.title,\n                body: resData.body,\n                comments: resData.comments,\n                created: new Date(resData.created),\n                likes: resData.likes,\n                postedBy: {\n                  _id: resData.postedBy._id,\n                  name: resData.postedBy.name\n                }\n              }\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var deletePost = function deletePost(postId) {\n  return function _callee3(dispatch, getState) {\n    var token, response, resData;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            token = getState().auth.token;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/post/\" + postId, {\n              method: \"DELETE\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \" + token\n              }\n            }));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            resData = _context3.sent;\n\n            if (!resData.error) {\n              _context3.next = 9;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 9:\n            dispatch({\n              type: DELETE_POST,\n              pid: postId\n            });\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updatePost = function updatePost(postId, title, body, base64Data, imageType) {\n  return function _callee4(dispatch, getState) {\n    var token, postData, response, resData;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            token = getState().auth.token;\n\n            if (!base64Data || !imageType || base64Data === '' && imageType === '') {\n              postData = {\n                title: title,\n                body: body\n              };\n            } else {\n              postData = {\n                title: title,\n                body: body,\n                base64Data: base64Data,\n                imageType: imageType\n              };\n            }\n\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/rn/post/\" + postId, {\n              method: \"PUT\",\n              headers: {\n                'Content-Type': \"application/json\",\n                Authorization: \"Bearer \" + token\n              },\n              body: JSON.stringify(postData)\n            }));\n\n          case 4:\n            response = _context4.sent;\n            _context4.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            resData = _context4.sent;\n\n            if (!resData.error) {\n              _context4.next = 10;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 10:\n            dispatch({\n              type: UPDATE_POST,\n              updatedPostData: {\n                _id: resData._id,\n                title: resData.title,\n                body: resData.body,\n                comments: resData.comments,\n                created: new Date(resData.created),\n                likes: resData.likes,\n                postedBy: {\n                  _id: resData.postedBy._id,\n                  name: resData.postedBy.name\n                },\n                updated: new Date(resData.updated)\n              }\n            });\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var likePost = function likePost(postId) {\n  return function _callee5(dispatch, getState) {\n    var token, userId, posts, index, response, resData;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.user._id;\n            posts = getState().posts.allPosts;\n            index = posts.findIndex(function (p) {\n              return p._id === postId;\n            });\n\n            if (!(posts[index].likes.indexOf(userId) === -1)) {\n              _context5.next = 14;\n              break;\n            }\n\n            dispatch({\n              type: LIKE_POST,\n              userId: userId,\n              postId: postId\n            });\n            _context5.next = 8;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/post/like\", {\n              method: \"PUT\",\n              headers: {\n                'Content-Type': \"application/json\",\n                Authorization: \"Bearer \" + token\n              },\n              body: JSON.stringify({\n                userId: userId,\n                postId: postId\n              })\n            }));\n\n          case 8:\n            response = _context5.sent;\n            _context5.next = 11;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 11:\n            resData = _context5.sent;\n\n            if (!resData.error) {\n              _context5.next = 14;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 14:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var unlikePost = function unlikePost(postId) {\n  return function _callee6(dispatch, getState) {\n    var token, userId, response, resData;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.user._id;\n            dispatch({\n              type: UNLIKE_POST,\n              userId: userId,\n              postId: postId\n            });\n            _context6.next = 5;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/post/unlike\", {\n              method: \"PUT\",\n              headers: {\n                'Content-Type': \"application/json\",\n                Authorization: \"Bearer \" + token\n              },\n              body: JSON.stringify({\n                userId: userId,\n                postId: postId\n              })\n            }));\n\n          case 5:\n            response = _context6.sent;\n            _context6.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            resData = _context6.sent;\n\n            if (!resData.error) {\n              _context6.next = 11;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 11:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var commentPost = function commentPost(postId, text) {\n  return function _callee7(dispatch, getState) {\n    var token, userId, userName, comment, response, resData;\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.user._id;\n            userName = getState().auth.user.name;\n            comment = {\n              text: text\n            };\n            _context7.next = 6;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/post/comment\", {\n              method: \"PUT\",\n              headers: {\n                'Content-Type': \"application/json\",\n                Authorization: \"Bearer \" + token\n              },\n              body: JSON.stringify({\n                userId: userId,\n                postId: postId,\n                comment: comment\n              })\n            }));\n\n          case 6:\n            response = _context7.sent;\n            _context7.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            resData = _context7.sent;\n\n            if (!resData.error) {\n              _context7.next = 12;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 12:\n            dispatch({\n              type: COMMENT_POST,\n              postId: postId,\n              comments: resData.comments\n            });\n\n          case 13:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var uncommentPost = function uncommentPost(postId, comment) {\n  return function _callee8(dispatch, getState) {\n    var token, userId, response, resData;\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            token = getState().auth.token;\n            userId = getState().auth.user._id;\n            dispatch({\n              type: UNCOMMENT_POST,\n              postId: postId,\n              commentId: comment._id\n            });\n            _context8.next = 5;\n            return _regeneratorRuntime.awrap(fetch(ENV.apiUrl + \"/post/uncomment\", {\n              method: \"PUT\",\n              headers: {\n                'Content-Type': \"application/json\",\n                Authorization: \"Bearer \" + token\n              },\n              body: JSON.stringify({\n                userId: userId,\n                postId: postId,\n                comment: comment\n              })\n            }));\n\n          case 5:\n            response = _context8.sent;\n            _context8.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            resData = _context8.sent;\n\n            if (!resData.error) {\n              _context8.next = 11;\n              break;\n            }\n\n            throw new Error(resData.error);\n\n          case 11:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/store/actions/posts.js"],"names":["ENV","DELETE_POST","CREATE_POST","UPDATE_POST","SET_POSTS","LIKE_POST","UNLIKE_POST","COMMENT_POST","UNCOMMENT_POST","ADD_COMMENT_TEMP","fetchPosts","dispatch","getState","fetch","apiUrl","response","json","resData","error","Error","type","posts","createPost","title","body","base64Data","imageType","token","auth","userId","user","_id","postData","method","headers","Authorization","JSON","stringify","comments","created","Date","likes","postedBy","name","deletePost","postId","Accept","pid","updatePost","updatedPostData","updated","likePost","allPosts","index","findIndex","p","indexOf","unlikePost","commentPost","text","userName","comment","uncommentPost","commentId"],"mappings":"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","sourcesContent":["import ENV from '../../env';\r\n\r\nexport const DELETE_POST = \"DELETE_PRODUCT\";\r\nexport const CREATE_POST = \"CREATE_PRODUCT\";\r\nexport const UPDATE_POST = \"UPDATE_PRODUCT\";\r\nexport const SET_POSTS = 'SET_POSTS';\r\nexport const LIKE_POST = 'LIKE_POST';\r\nexport const UNLIKE_POST = 'UNLIKE_POST';\r\nexport const COMMENT_POST = 'COMMENT_POST';\r\nexport const UNCOMMENT_POST = 'UNCOMMENT_POST';\r\nexport const ADD_COMMENT_TEMP = 'ADD_COMMENT_TEMP';\r\n\r\nexport const fetchPosts = () => {\r\n    return async (dispatch, getState) => {\r\n        const response = await fetch(`${ENV.apiUrl}/rn/allposts`);\r\n\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n\r\n        // console.log(resData[0]);\r\n        dispatch({\r\n            type: SET_POSTS,\r\n            posts: resData\r\n        })\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const createPost = (title, body, base64Data, imageType) => {\r\n    return async (dispatch, getState) => {\r\n\r\n        const token = getState().auth.token;\r\n        const userId = getState().auth.user._id;\r\n        const postData = {title, body, base64Data, imageType}\r\n        // console.log(JSON.stringify(postData))\r\n        // any async code\r\n        const response = await fetch(`${ENV.apiUrl}/rn/post/new/${userId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify(postData)\r\n        });\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n\r\n        dispatch({\r\n            type: CREATE_POST,\r\n            postData: {\r\n                _id: resData._id,\r\n                title: resData.title,\r\n                body: resData.body,\r\n                comments: resData.comments,\r\n                created: new Date(resData.created),\r\n                likes: resData.likes,\r\n                postedBy: {\r\n                    _id: resData.postedBy._id,\r\n                    name: resData.postedBy.name\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const deletePost = (postId) => {\r\n    return async (dispatch, getState) => {\r\n        const token = getState().auth.token;\r\n        const response = await fetch(`${ENV.apiUrl}/post/${postId}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n        dispatch({\r\n            type: DELETE_POST,\r\n            pid: postId\r\n        })\r\n    }\r\n};\r\n\r\n\r\nexport const updatePost = (postId,title, body, base64Data, imageType) => {\r\n    return async (dispatch, getState) => {\r\n        const token = getState().auth.token;\r\n        let postData;\r\n        // const userId = getState().auth.user._id;\r\n        if( !base64Data || !imageType || (base64Data === '' && imageType === '')){\r\n            postData = {title, body}\r\n        } else {\r\n            postData = {title, body, base64Data, imageType}\r\n        }\r\n        const response = await fetch(`${ENV.apiUrl}/rn/post/${postId}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify(postData)\r\n        });\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n        dispatch({\r\n            type: UPDATE_POST,\r\n            updatedPostData: {\r\n                _id: resData._id,\r\n                title: resData.title,\r\n                body: resData.body,\r\n                comments: resData.comments,\r\n                created: new Date(resData.created),\r\n                likes: resData.likes,\r\n                postedBy: {\r\n                    _id: resData.postedBy._id,\r\n                    name: resData.postedBy.name\r\n                },\r\n                updated: new Date(resData.updated)\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const likePost = (postId) => {\r\n    return async (dispatch, getState) => {\r\n        const token = getState().auth.token;\r\n        const userId = getState().auth.user._id;\r\n        const posts = getState().posts.allPosts;\r\n        const index = posts.findIndex(p => p._id === postId)\r\n        if(posts[index].likes.indexOf(userId) === -1){\r\n            dispatch({\r\n                type: LIKE_POST,\r\n                userId: userId,\r\n                postId: postId\r\n            });\r\n            \r\n            const response = await fetch(`${ENV.apiUrl}/post/like`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    'Content-Type': \"application/json\",\r\n                    Authorization: `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify({ userId, postId })\r\n            });\r\n            const resData = await response.json();\r\n            if(resData.error){\r\n                throw new Error(resData.error);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport const unlikePost = (postId) => {\r\n    return async (dispatch, getState) => {\r\n        const token = getState().auth.token;\r\n        const userId = getState().auth.user._id;\r\n        \r\n        dispatch({\r\n            type: UNLIKE_POST,\r\n            userId: userId,\r\n            postId: postId\r\n        });\r\n        const response = await fetch(`${ENV.apiUrl}/post/unlike`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ userId, postId })\r\n        });\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const commentPost = (postId, text) => {\r\n    return async (dispatch, getState) => {\r\n        const token = getState().auth.token;\r\n        const userId = getState().auth.user._id;\r\n        const userName = getState().auth.user.name;\r\n        \r\n        const comment = {text};\r\n\r\n        // dispatch({\r\n        //     type: ADD_COMMENT_TEMP,\r\n        //     postId: postId,\r\n        //     comment: {\r\n        //         text: text,\r\n        //         postedBy: {\r\n        //             _id: userId,\r\n        //             name: userName\r\n        //         },\r\n        //         created: new Date()\r\n        //     }\r\n        // });\r\n\r\n        const response = await fetch(`${ENV.apiUrl}/post/comment`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ userId, postId, comment })\r\n        });\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n        dispatch({\r\n            type: COMMENT_POST,\r\n            postId: postId,\r\n            comments: resData.comments\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const uncommentPost = (postId, comment) => {\r\n    return async (dispatch, getState) => {\r\n        const token = getState().auth.token;\r\n        const userId = getState().auth.user._id;\r\n        \r\n        dispatch({\r\n            type: UNCOMMENT_POST,\r\n            postId: postId,\r\n            commentId: comment._id\r\n        });\r\n\r\n        const response = await fetch(`${ENV.apiUrl}/post/uncomment`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ userId, postId, comment })\r\n        });\r\n        const resData = await response.json();\r\n        if(resData.error){\r\n            throw new Error(resData.error);\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}
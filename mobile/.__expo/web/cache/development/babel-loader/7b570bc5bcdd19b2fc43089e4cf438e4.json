{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_POSTS, CREATE_POST, DELETE_POST, UPDATE_POST, LIKE_POST, UNLIKE_POST, COMMENT_POST, UNCOMMENT_POST, ADD_COMMENT_TEMP } from \"../actions/posts\";\nvar initialState = {\n  allPosts: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: action.posts\n      });\n\n    case CREATE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: [action.postData].concat(_toConsumableArray(state.allPosts))\n      });\n\n    case UPDATE_POST:\n      var postIndex = state.allPosts.findIndex(function (post) {\n        return post._id === action.updatedPostData._id;\n      });\n\n      var updatedAllPosts = _toConsumableArray(state.allPosts);\n\n      updatedAllPosts[postIndex] = action.updatedPostData;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedAllPosts\n      });\n\n    case DELETE_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: state.allPosts.filter(function (post) {\n          return post._id !== action.pid;\n        })\n      });\n\n    case LIKE_POST:\n      var pIndex = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n\n      var updatedLikePosts = _toConsumableArray(state.allPosts);\n\n      if (updatedLikePosts[pIndex].likes.indexOf(action.userId) === -1) {\n        updatedLikePosts[pIndex].likes = updatedLikePosts[pIndex].likes.concat(action.userId);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedLikePosts\n      });\n\n    case UNLIKE_POST:\n      var pInd = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n\n      var updatedUnlikePosts = _toConsumableArray(state.allPosts);\n\n      updatedUnlikePosts[pInd].likes = updatedUnlikePosts[pInd].likes.filter(function (x) {\n        return x !== action.userId;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedUnlikePosts\n      });\n\n    case COMMENT_POST:\n      var index = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n\n      var updatedCommentPosts = _toConsumableArray(state.allPosts);\n\n      updatedCommentPosts[index].comments = action.comments;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedCommentPosts\n      });\n\n    case UNCOMMENT_POST:\n      var indx = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n\n      var updatedUncommentPosts = _toConsumableArray(state.allPosts);\n\n      updatedUncommentPosts[indx].comments = updatedUncommentPosts[indx].comments.filter(function (c) {\n        return c._id !== action.commentId;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedUncommentPosts\n      });\n\n    case ADD_COMMENT_TEMP:\n      var i = state.allPosts.findIndex(function (post) {\n        return post._id === action.postId;\n      });\n\n      var updatedAddComment = _toConsumableArray(state.allPosts);\n\n      updatedAddComment[i].comments = updatedAddComment[i].comments.concat(action.comment);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allPosts: updatedAddComment\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/store/reducers/posts.js"],"names":["SET_POSTS","CREATE_POST","DELETE_POST","UPDATE_POST","LIKE_POST","UNLIKE_POST","COMMENT_POST","UNCOMMENT_POST","ADD_COMMENT_TEMP","initialState","allPosts","state","action","type","posts","postData","postIndex","findIndex","post","_id","updatedPostData","updatedAllPosts","filter","pid","pIndex","postId","updatedLikePosts","likes","indexOf","userId","concat","pInd","updatedUnlikePosts","x","index","updatedCommentPosts","comments","indx","updatedUncommentPosts","c","commentId","i","updatedAddComment","comment"],"mappings":"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","sourcesContent":["import { SET_POSTS, CREATE_POST, DELETE_POST, UPDATE_POST, LIKE_POST, UNLIKE_POST, COMMENT_POST, UNCOMMENT_POST, ADD_COMMENT_TEMP } from \"../actions/posts\";\r\n\r\nconst initialState = {\r\n    allPosts: [],\r\n};\r\n\r\nexport default (state=initialState, action) => {\r\n    switch(action.type){\r\n        case SET_POSTS:\r\n            return {\r\n                ...state,\r\n                allPosts: action.posts\r\n            }\r\n\r\n        case CREATE_POST:\r\n            return{\r\n                ...state,\r\n                allPosts: [action.postData, ...state.allPosts]\r\n            }\r\n\r\n        case UPDATE_POST:\r\n            const postIndex = state.allPosts.findIndex(post => post._id === action.updatedPostData._id);\r\n            const updatedAllPosts = [...state.allPosts];\r\n            updatedAllPosts[postIndex] = action.updatedPostData;\r\n            return {\r\n                ...state,\r\n                allPosts: updatedAllPosts\r\n            }\r\n\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                allPosts: state.allPosts.filter(post => post._id !== action.pid)\r\n            }\r\n\r\n        case LIKE_POST:\r\n            const pIndex = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedLikePosts = [...state.allPosts];\r\n            if(updatedLikePosts[pIndex].likes.indexOf(action.userId) === -1){\r\n                updatedLikePosts[pIndex].likes = updatedLikePosts[pIndex].likes.concat(action.userId);\r\n            }\r\n            return{\r\n                ...state,\r\n                allPosts: updatedLikePosts\r\n            }\r\n\r\n        case UNLIKE_POST:\r\n            const pInd = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedUnlikePosts = [...state.allPosts];\r\n            updatedUnlikePosts[pInd].likes = updatedUnlikePosts[pInd].likes.filter(x => x !== action.userId);\r\n            return{\r\n                ...state,\r\n                allPosts: updatedUnlikePosts\r\n            }\r\n\r\n        case COMMENT_POST:\r\n            const index = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedCommentPosts = [...state.allPosts];\r\n            updatedCommentPosts[index].comments = action.comments;\r\n            return{\r\n                ...state,\r\n                allPosts: updatedCommentPosts\r\n            }\r\n\r\n        case UNCOMMENT_POST:\r\n            const indx = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedUncommentPosts = [...state.allPosts];\r\n            updatedUncommentPosts[indx].comments = updatedUncommentPosts[indx].comments.filter(c => c._id !== action.commentId)\r\n\r\n            return{\r\n                ...state,\r\n                allPosts: updatedUncommentPosts\r\n            }\r\n\r\n        case ADD_COMMENT_TEMP:\r\n            const i = state.allPosts.findIndex(post => post._id === action.postId);\r\n            const updatedAddComment = [...state.allPosts];\r\n            updatedAddComment[i].comments = updatedAddComment[i].comments.concat(action.comment)\r\n            return{\r\n                ...state,\r\n                allPosts: updatedAddComment\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
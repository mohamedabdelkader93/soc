{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\nodejs\\\\mern\\\\SocialApp-React-Native-master\\\\screens\\\\chat\\\\ChatListScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as chatActions from \"../../store/actions/chat\";\nimport Colors from \"../../constants/Colors\";\nimport ChatListItem from \"../../components/UI/ChatListItem\";\nimport { Container, Header, Item, Input, Icon } from 'native-base';\n\nvar ChatListScreen = function ChatListScreen(props) {\n  var loggedUser = useSelector(function (state) {\n    return state.auth.user;\n  });\n  var chatList = useSelector(function (state) {\n    return state.chat.chatList;\n  });\n  var allChats = useSelector(function (state) {\n    return state.chat.allChats;\n  });\n  var allUsers = useSelector(function (state) {\n    return state.users.allUsers;\n  });\n  allUsers = allUsers.filter(function (item) {\n    return item._id !== loggedUser._id;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isRefreshing = _useState4[0],\n      setIsRefreshing = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchText = _useState6[0],\n      setSearchText = _useState6[1];\n\n  var _useState7 = useState(chatList),\n      _useState8 = _slicedToArray(_useState7, 2),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  var dispatch = useDispatch();\n  var loadChatList = useCallback(function _callee() {\n    var result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsRefreshing(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(chatActions.fetchChatList()));\n\n          case 4:\n            result = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(chatActions.fetchChats()));\n\n          case 7:\n            setData(result);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 13:\n            setIsRefreshing(false);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 10]], Promise);\n  }, [dispatch, setIsLoading]);\n  var loadChats = useCallback(function _callee2() {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(chatActions.fetchChats()));\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  }, [dispatch, setIsLoading]);\n  useEffect(function () {\n    setIsLoading(true);\n    loadChats().then(function () {\n      setIsLoading(false);\n    });\n    setIsLoading(false);\n  }, [dispatch, loadChats]);\n\n  var handleSearchTextChange = function handleSearchTextChange(text) {\n    setSearchText(text);\n\n    if (text !== '') {\n      var filteredData = [];\n      var currData = allUsers;\n      filteredData = currData.filter(function (item) {\n        var lc = item.name.toLowerCase();\n        text = text.toLowerCase();\n        return lc.includes(text);\n      });\n      setData(filteredData);\n    } else {\n      setData(chatList);\n    }\n  };\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.centered,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.primary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, React.createElement(Header, {\n    style: {\n      backgroundColor: Colors.brightBlue\n    },\n    searchBar: true,\n    rounded: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, React.createElement(Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, React.createElement(Icon, {\n    name: \"ios-search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }), React.createElement(Input, {\n    value: searchText,\n    onChangeText: function onChangeText(text) {\n      return handleSearchTextChange(text);\n    },\n    placeholder: \"Search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }), React.createElement(Icon, {\n    name: \"ios-people\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }))), data.length === 0 && React.createElement(View, {\n    style: styles.centered,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, \"No chats !\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, \"Either your search does not match any user's name\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, \"or you have no chats.\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, \"Please refresh if you have new chats.\")), React.createElement(FlatList, {\n    data: data,\n    refreshing: isRefreshing,\n    onRefresh: loadChatList,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: function renderItem(user) {\n      return React.createElement(ChatListItem, {\n        user: user.item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport var screenOptions = {\n  headerTitle: 'Chats'\n};\nvar styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default ChatListScreen;","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/screens/chat/ChatListScreen.js"],"names":["React","useState","useCallback","useEffect","useDispatch","useSelector","chatActions","Colors","ChatListItem","Container","Header","Item","Input","Icon","ChatListScreen","props","loggedUser","state","auth","user","chatList","chat","allChats","allUsers","users","filter","item","_id","isLoading","setIsLoading","isRefreshing","setIsRefreshing","searchText","setSearchText","data","setData","dispatch","loadChatList","fetchChatList","result","fetchChats","console","log","loadChats","then","handleSearchTextChange","text","filteredData","currData","lc","name","toLowerCase","includes","styles","centered","primary","backgroundColor","brightBlue","length","screenOptions","headerTitle","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { View, StyleSheet, ActivityIndicator, FlatList, Text } from 'react-native';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport * as chatActions from '../../store/actions/chat';\r\nimport Colors from '../../constants/Colors';\r\nimport ChatListItem from '../../components/UI/ChatListItem';\r\nimport { Container, Header, Item, Input, Icon } from 'native-base';\r\n\r\nconst ChatListScreen = (props) => {\r\n\r\n    const loggedUser = useSelector(state => state.auth.user);\r\n    const chatList = useSelector(state => state.chat.chatList);\r\n    const allChats = useSelector(state => state.chat.allChats);\r\n    let allUsers = useSelector(state => state.users.allUsers);\r\n\r\n    // remove logged user from the list\r\n    allUsers = allUsers.filter(item => item._id !== loggedUser._id);\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isRefreshing, setIsRefreshing] = useState(false);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [data, setData] = useState(chatList);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const loadChatList = useCallback(async () => {\r\n        setIsRefreshing(true);\r\n        try {\r\n            const result = await dispatch(chatActions.fetchChatList());\r\n            await dispatch(chatActions.fetchChats());\r\n            setData(result);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n        setIsRefreshing(false);\r\n    }, [dispatch, setIsLoading])\r\n\r\n    const loadChats = useCallback(async () => {\r\n        try {\r\n            await dispatch(chatActions.fetchChats());\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }, [dispatch, setIsLoading])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const unsubscribe = props.navigation.addListener('focus', e => {\r\n    //         setSearchText('');\r\n    //         loadChatList();\r\n    //     });\r\n    //     return () => {\r\n    //         unsubscribe();\r\n    //     };\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        loadChats()\r\n        .then(() => {\r\n            setIsLoading(false);\r\n        });\r\n        setIsLoading(false)\r\n    }, [dispatch, loadChats])\r\n\r\n    const handleSearchTextChange = (text) => {\r\n        setSearchText(text);\r\n        if(text !== ''){\r\n            let filteredData = []\r\n            let currData = allUsers;\r\n\r\n            filteredData = currData.filter(item => {\r\n                const lc = item.name.toLowerCase();\r\n                text = text.toLowerCase();\r\n                return lc.includes(text);\r\n            });\r\n            setData(filteredData);\r\n        } else {\r\n            setData(chatList);\r\n        }\r\n    }   \r\n\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <View style={styles.centered} >\r\n                <ActivityIndicator size='large' color={Colors.primary} />\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Header style={{ backgroundColor: Colors.brightBlue }} searchBar rounded>\r\n                <Item>\r\n                    <Icon name=\"ios-search\" />\r\n                    <Input\r\n                        value={searchText}\r\n                        onChangeText={(text) => handleSearchTextChange(text)}\r\n                        placeholder=\"Search\" \r\n                    />\r\n                    <Icon name=\"ios-people\" />\r\n                </Item>\r\n            </Header>\r\n            { data.length === 0 && (\r\n                <View style={styles.centered}>\r\n                    <Text>No chats !</Text>\r\n                    <Text>Either your search does not match any user's name</Text>\r\n                    <Text>or you have no chats.</Text>\r\n                    <Text>Please refresh if you have new chats.</Text>\r\n                </View>\r\n            ) }\r\n            <FlatList\r\n                data={data}\r\n                refreshing={isRefreshing}\r\n                onRefresh={loadChatList}\r\n                keyExtractor={(item) => item._id}\r\n                renderItem={(user) => (\r\n                    <ChatListItem user={user.item} />\r\n                )}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\n\r\nexport const screenOptions = {\r\n    headerTitle: 'Chats'\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    centered: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n})\r\n\r\nexport default ChatListScreen;"]},"metadata":{},"sourceType":"module"}
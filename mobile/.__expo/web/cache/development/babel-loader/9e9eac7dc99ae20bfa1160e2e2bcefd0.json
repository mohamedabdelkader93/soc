{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\nodejs\\\\mern\\\\SocialApp-React-Native-master\\\\screens\\\\post\\\\CommentsScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Comment from \"../../components/UI/Comment\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as postsActions from \"../../store/actions/posts\";\nimport Colors from \"../../constants/Colors\";\nimport { showMessage } from \"react-native-flash-message\";\n\nvar CommentsScreen = function CommentsScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isRefreshing = _useState6[0],\n      setIsRefreshing = _useState6[1];\n\n  var route = props.route;\n  var postId = route.params.postId;\n  var userId = route.params.userId;\n  var dispatch = useDispatch();\n  var posts = useSelector(function (state) {\n    return state.posts.allPosts;\n  });\n  var postIndex = posts.findIndex(function (post) {\n    return post._id === postId;\n  });\n  var comments = posts[postIndex].comments;\n  var loadPosts = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsRefreshing(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(postsActions.fetchPosts()));\n\n          case 4:\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](1);\n            Alert.alert('Error', error.message, [{\n              text: 'Okay'\n            }]);\n\n          case 9:\n            setIsRefreshing(false);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 6]], Promise);\n  }, [dispatch]);\n\n  var createCommentHandler = function createCommentHandler() {\n    return _regeneratorRuntime.async(function createCommentHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(text.length === 0)) {\n              _context2.next = 4;\n              break;\n            }\n\n            Alert.alert('Please enter some text', 'Cannot create empty comment', [{\n              text: 'Okay'\n            }]);\n            _context2.next = 15;\n            break;\n\n          case 4:\n            setIsLoading(true);\n            _context2.prev = 5;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(dispatch(postsActions.commentPost(postId, text)));\n\n          case 8:\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](5);\n            Alert.alert('Error, cannot comment', _context2.t0.message, [{\n              text: 'Okay'\n            }]);\n\n          case 13:\n            setText('');\n            setIsLoading(false);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[5, 10]], Promise);\n  };\n\n  var deleteCommentHandler = function deleteCommentHandler(comment) {\n    return _regeneratorRuntime.async(function deleteCommentHandler$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            Alert.alert('Are you sure?', 'Do you really want to delete this comment?', [{\n              text: 'No',\n              style: 'default'\n            }, {\n              text: 'Yes',\n              style: 'destructive',\n              onPress: function onPress() {\n                return _regeneratorRuntime.async(function onPress$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.prev = 0;\n                        showMessage({\n                          message: \"Your comment was deleted.\",\n                          type: \"warning\",\n                          duration: 3000,\n                          icon: {\n                            icon: \"warning\",\n                            position: 'left'\n                          }\n                        });\n                        _context3.next = 4;\n                        return _regeneratorRuntime.awrap(dispatch(postsActions.uncommentPost(postId, comment)));\n\n                      case 4:\n                        _context3.next = 9;\n                        break;\n\n                      case 6:\n                        _context3.prev = 6;\n                        _context3.t0 = _context3[\"catch\"](0);\n                        Alert.alert('Error, cannot delete this comment', _context3.t0.message, [{\n                          text: 'Okay'\n                        }]);\n\n                      case 9:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, null, null, [[0, 6]], Promise);\n              }\n            }]);\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    style: styles.root,\n    onRefresh: loadPosts,\n    refreshing: isRefreshing,\n    data: comments,\n    ItemSeparatorComponent: function ItemSeparatorComponent() {\n      return React.createElement(View, {\n        style: styles.separator,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: function renderItem(item) {\n      var comment = item.item;\n      return React.createElement(Comment, {\n        comment: comment,\n        deleteCommentHandler: deleteCommentHandler,\n        userId: userId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), React.createElement(KeyboardAvoidingView, {\n    style: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      bottom: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.inputContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputs,\n    placeholder: \"Leave a comment\",\n    value: text,\n    onChangeText: function onChangeText(value) {\n      return setText(value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }), React.createElement(View, {\n    style: styles.postButtonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: createCommentHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    size: \"small\",\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 33\n    }\n  }) : React.createElement(Text, {\n    style: {\n      color: '#fff'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 33\n    }\n  }, \"Post\"))))));\n};\n\nexport var screenOptions = {\n  headerTitle: 'Comments'\n};\nvar styles = StyleSheet.create({\n  root: {\n    backgroundColor: \"#ffffff\",\n    marginBottom: 45\n  },\n  inputs: {\n    height: 45,\n    width: '85%',\n    marginLeft: 16,\n    borderBottomColor: '#FFFFFF',\n    flex: 1,\n    position: 'absolute',\n    bottom: 0,\n    paddingRight: 20\n  },\n  inputContainer: {\n    borderBottomColor: '#F5FCFF',\n    backgroundColor: '#FFFFFF',\n    borderBottomWidth: 1,\n    width: '100%',\n    height: 45,\n    flexDirection: 'row',\n    alignItems: 'center',\n    shadowColor: \"#808080\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  postButtonContainer: {\n    position: 'absolute',\n    right: 0,\n    height: 45,\n    width: '15%',\n    backgroundColor: Colors.brightBlue,\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default CommentsScreen;","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/screens/post/CommentsScreen.js"],"names":["React","useState","useCallback","Comment","useSelector","useDispatch","postsActions","Colors","showMessage","CommentsScreen","props","text","setText","isLoading","setIsLoading","isRefreshing","setIsRefreshing","route","postId","params","userId","dispatch","posts","state","allPosts","postIndex","findIndex","post","_id","comments","loadPosts","fetchPosts","Alert","alert","error","message","createCommentHandler","length","commentPost","deleteCommentHandler","comment","style","onPress","type","duration","icon","position","uncommentPost","flex","styles","root","separator","item","left","right","bottom","inputContainer","inputs","value","postButtonContainer","color","screenOptions","headerTitle","StyleSheet","create","backgroundColor","marginBottom","height","width","marginLeft","borderBottomColor","paddingRight","borderBottomWidth","flexDirection","alignItems","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","brightBlue","padding","display","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport {  StyleSheet, Text, View,FlatList, TextInput, KeyboardAvoidingView, Alert, ActivityIndicator, TouchableOpacity } from 'react-native';\r\n\r\nimport Comment from '../../components/UI/Comment';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport * as postsActions from '../../store/actions/posts';\r\nimport Colors from '../../constants/Colors';\r\nimport { showMessage } from \"react-native-flash-message\";\r\n\r\nconst CommentsScreen = (props) => {\r\n\r\n    const [text, setText] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n    const { route } = props;\r\n    const postId = route.params.postId;\r\n    const userId = route.params.userId;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const posts = useSelector(state => state.posts.allPosts);\r\n    const postIndex = posts.findIndex(post => post._id === postId);\r\n    const comments = posts[postIndex].comments;\r\n\r\n\r\n    const loadPosts = useCallback(async () => {\r\n        setIsRefreshing(true);\r\n        try {\r\n            await dispatch(postsActions.fetchPosts());\r\n\r\n        } catch (err) {\r\n            Alert.alert(\r\n                'Error',\r\n                error.message,\r\n                [{ text: 'Okay' }]\r\n            );\r\n        }\r\n        setIsRefreshing(false);\r\n    }, [dispatch])\r\n\r\n    const createCommentHandler = async () => {\r\n        if(text.length === 0){\r\n            Alert.alert(\r\n                'Please enter some text',\r\n                'Cannot create empty comment',\r\n                [{ text: 'Okay' }]\r\n            );\r\n        } else {\r\n            setIsLoading(true);\r\n            try {\r\n                await dispatch(postsActions.commentPost(postId, text))\r\n            } catch (error) {\r\n                Alert.alert(\r\n                    'Error, cannot comment',\r\n                    error.message,\r\n                    [{ text: 'Okay' }]\r\n                );\r\n            }\r\n            setText('');\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n\r\n    const deleteCommentHandler = async (comment) => {\r\n        Alert.alert(\r\n            'Are you sure?', \r\n            'Do you really want to delete this comment?',\r\n            [\r\n                {text: 'No', style: 'default'},\r\n                {\r\n                    text: 'Yes', \r\n                    style: 'destructive', \r\n                    onPress: async () => {\r\n                        try {\r\n                            showMessage({\r\n                                message: `Your comment was deleted.`,\r\n                                type: \"warning\",\r\n                                duration: 3000,\r\n                                icon: { icon: \"warning\", position: 'left' }\r\n                            });\r\n                            await dispatch(postsActions.uncommentPost(postId,comment))\r\n                        } catch (error) {\r\n                            Alert.alert(\r\n                                'Error, cannot delete this comment',\r\n                                error.message,\r\n                                [{ text: 'Okay' }]\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        );\r\n    };\r\n\r\n\r\n    return (\r\n        <View style={{ flex: 1 }} >\r\n            <FlatList\r\n                style={styles.root}\r\n                onRefresh={loadPosts}\r\n                refreshing={isRefreshing}\r\n                data={comments}\r\n                ItemSeparatorComponent={() => {\r\n                    return (\r\n                        <View style={styles.separator} />\r\n                    )\r\n                }}\r\n                keyExtractor={(item) => {\r\n                    return item._id;\r\n                }}\r\n                renderItem={(item) => {\r\n                    const comment = item.item;\r\n                    return(\r\n                        <Comment comment={comment} deleteCommentHandler={deleteCommentHandler} userId={userId} />\r\n                    );\r\n                }}\r\n            />\r\n            <KeyboardAvoidingView style={{position: 'absolute', left: 0, right: 0, bottom: 0}}>\r\n                <View style={styles.inputContainer}>\r\n                    <TextInput style={styles.inputs}\r\n                        placeholder=\"Leave a comment\"\r\n                        value={text}\r\n                        onChangeText={(value) => setText(value)}\r\n                    />\r\n                    <View \r\n                        style={styles.postButtonContainer}\r\n                    >\r\n                        <TouchableOpacity\r\n                            onPress={createCommentHandler}\r\n                        >\r\n                            { isLoading ? (\r\n                                <ActivityIndicator size=\"small\" color=\"white\" />\r\n                            ) : (\r\n                                <Text style={{ color: '#fff' }} >Post</Text>\r\n                            ) }\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n                \r\n            </KeyboardAvoidingView>\r\n                \r\n        </View>\r\n    );\r\n};\r\n\r\n\r\nexport const screenOptions = {\r\n    headerTitle: 'Comments'\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    root: {\r\n        backgroundColor: \"#ffffff\",\r\n        marginBottom: 45\r\n    },\r\n    inputs: {\r\n        height: 45,\r\n        width: '85%',\r\n        marginLeft: 16,\r\n        borderBottomColor: '#FFFFFF',\r\n        flex: 1,\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        paddingRight: 20\r\n    },\r\n    inputContainer: {\r\n        borderBottomColor: '#F5FCFF',\r\n        backgroundColor: '#FFFFFF',\r\n        borderBottomWidth: 1,\r\n        width: '100%',\r\n        height: 45,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n\r\n        shadowColor: \"#808080\",\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n\r\n        elevation: 5,\r\n    },\r\n    postButtonContainer: {\r\n        position: 'absolute', \r\n        right: 0, \r\n        height: 45,\r\n        width: '15%' , \r\n        backgroundColor: Colors.brightBlue, \r\n        padding: 5, \r\n        display: 'flex', \r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n});\r\n\r\nexport default CommentsScreen;"]},"metadata":{},"sourceType":"module"}
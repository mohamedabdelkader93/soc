{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_CHAT_LIST, SET_CHATS, ADD_CHAT } from \"../actions/chat\";\nvar initialState = {\n  chatList: [],\n  allChats: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_CHAT_LIST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: action.chatList\n      });\n\n    case SET_CHATS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allChats: action.chats\n      });\n\n    case ADD_CHAT:\n      var updatedAllChats = _toConsumableArray(state.allChats);\n\n      updatedAllChats = updatedAllChats.concat(action.newChat);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allChats: updatedAllChats\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["D:/nodejs/mern/SocialApp-React-Native-master/store/reducers/chat.js"],"names":["SET_CHAT_LIST","SET_CHATS","ADD_CHAT","initialState","chatList","allChats","state","action","type","chats","updatedAllChats","concat","newChat"],"mappings":";;;;;;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC;AAGA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,QAAQ,EAAE;AAFO,CAArB;AAMA,gBAAe,YAAgC;AAAA,MAA/BC,KAA+B,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC3C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,aAAL;AACI,6CACOM,KADP;AAEIF,QAAAA,QAAQ,EAAEG,MAAM,CAACH;AAFrB;;AAKJ,SAAKH,SAAL;AACI,6CACOK,KADP;AAEID,QAAAA,QAAQ,EAAEE,MAAM,CAACE;AAFrB;;AAKJ,SAAKP,QAAL;AACI,UAAIQ,eAAe,sBAAOJ,KAAK,CAACD,QAAb,CAAnB;;AACAK,MAAAA,eAAe,GAAGA,eAAe,CAACC,MAAhB,CAAuBJ,MAAM,CAACK,OAA9B,CAAlB;AACA,6CACON,KADP;AAEID,QAAAA,QAAQ,EAAEK;AAFd;;AAKJ;AACI,aAAOJ,KAAP;AAtBR;AAwBH,CAzBD","sourcesContent":["import { SET_CHAT_LIST, SET_CHATS, ADD_CHAT } from \"../actions/chat\";\r\n\r\n\r\nconst initialState = {\r\n    chatList: [],\r\n    allChats: []\r\n};\r\n\r\n\r\nexport default (state=initialState, action) => {\r\n    switch(action.type){\r\n        case SET_CHAT_LIST:\r\n            return{\r\n                ...state,\r\n                chatList: action.chatList\r\n            }\r\n\r\n        case SET_CHATS:\r\n            return{\r\n                ...state,\r\n                allChats: action.chats\r\n            }\r\n\r\n        case ADD_CHAT:\r\n            let updatedAllChats = [...state.allChats];\r\n            updatedAllChats = updatedAllChats.concat(action.newChat)\r\n            return{\r\n                ...state,\r\n                allChats: updatedAllChats\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}